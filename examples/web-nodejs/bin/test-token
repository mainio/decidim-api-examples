#!/usr/bin/env node

const dotenv = require("dotenv");
const http = require("http");
const { createHash } = require("crypto");

dotenv.config();

const clientId = process.env.OAUTH_CLIENT_ID;
const tokenUrl = `${process.env.OAUTH_URL}/token`;

const authCode = "QEocRwhsS9KB_eVU1TwHJKEa8jpR6z_Oukpazc2bNio";
const verifier = "driZnfv5D7PyUvlYrT6~G_T92KJ1Og7dIRdkRcFTt4X5~0OAmCKGKPZUVz4C38QvKbVLfR3_PfS52Bb7_0snRGBbUCT_RkhLLIuh-scq8AS2Zf95WPDz~xNENGR5ytkX";
const challenge = createHash("sha256").update(verifier).digest("base64");

const formData = new FormData();
formData.append("grant_type", "authorization_code");
formData.append("code", authCode);
formData.append("client_id", clientId);
formData.append("redirect_uri", "http://localhost:8080/");
formData.append("code_challenge", challenge);
formData.append("code_challenge_method", "S256");

const postData = new URLSearchParams(formData).toString();
console.log(postData);

const tokenUri = new URL(tokenUrl);
const options = {
  hostname: tokenUri.hostname,
  port: tokenUri.port,
  path: tokenUri.pathname,
  method: "POST",
  data: formData,
  headers: {
    "Content-Type": "application/x-www-form-urlencoded",
    "Content-Length": Buffer.byteLength(postData)
  }
};
const request = http.request(options, (res) => {
  let responseData = "";

  // A chunk of data has been received.
  res.on("data", (chunk) => {
    responseData += chunk;
  });

  // The whole response has been received.
  res.on("end", () => {
    console.log(`Status: ${res.statusCode}`)
    console.log('Response:', responseData);
  });
});


request.write(postData);
request.end();
